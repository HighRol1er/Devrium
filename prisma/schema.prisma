// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model == table 
model User {
  id            String    @id @default(cuid())
  userName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  follower      Follow[]  @relation("follower")
  following     Follow[]  @relation("following")
  savedPost     Saved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  follower     User   @relation("follower", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// check user validation
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Saved {
  id     Int     @id @default(autoincrement())
  postId Int?
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int       @id @default(autoincrement())
  userId     String
  title      String // title이 필요한가? .. content랑 같이 합해서 보내면 되는거 아닌가.. 
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  likes      Like[]
  savedBy    Saved[]
  user       User      @relation(fields: [userId], references: [id])
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  timestamp DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
